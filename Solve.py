# DO NOT EDIT THIS FILE

from MyFifteenPuzzle import *
from MySearch import *

from sys import argv,exit

def usage():
	print 'There are three usage patterns:'
	print
	print 'python Solve.py num'
	print '    Run num random patters'
	print
	print 'python pattern'
	print '    Solve the specified pattern which is a list of tiles reading'
	print '    off the rows from top to bottom.  0 for the empty tile.'
	print
	print 'python filename'
	print '    Solve all of the patterns in the file.  The patterns are as'
	print '    described above.'
	print
	print 'python help'
	print '    prints this message'
	exit()

problem = FifteenPuzzle()

patterns = []
try:
	if argv[0] == 'help':
		usage()
	elif len(argv) == 2:
		try:
			num = int(argv[1])
			for i in range(num):
				patterns.append(problem.randomState())
		except:
			f = file(argv[1])
			for l in f.readlines():
				p = [int(x) for x in l.strip().split()]
				if len(p) != 16:
					usage()
				if sorted(p) != range(16):
					usage()
					
				patterns.append( tuple([ tuple([ p[i] for i in range(j,j+4) ]) for j in range(0,16,4) ] ) )
except:
	usage()


startTime = time()
print 'Initializing puzzle class'
problem = MyFifteenPuzzle()
print 'Elapsed time', time() - startTime

for state in patterns:
	print 'Solving pattern', state
	
	problem._initial = state
	startTime = time()
	search = MySearch()
	solution = search.perform(problem)

	print 'Solution of length', len(solution), 'found in', time() - startTime, 'seconds'

	for a in solution:
		state = problem.result(state,a)

	if state != problem.getGoal():
		print 'Solution state not reached'
	else:
		print 'Correct solution found'
		
	print
